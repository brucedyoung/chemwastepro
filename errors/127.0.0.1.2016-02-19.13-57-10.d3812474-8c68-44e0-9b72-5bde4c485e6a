(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.InternalError\'> (1054, u"Unknown column \'item.inputnumber\' in \'field list\'")'
p3
sS'layer'
p4
S'/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/controllers/inventory.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# try something like\nfrom gluon.custom_import import track_changes; track_changes(True)\nfrom cwp_htmlhelpers import cwpeditlink\n\ndef index():\n    PageHeader = ""\n    #grid = SQLFORM.grid(db.item)\n\n    return dict(PageHeader=PageHeader,grid=grid)\nimport json\ndef item():\n    PageHeader = "Item"\n    addbutton = """<a href ="""+URL("inventory","itemedit")+""" class="btn btn-block btn-success">Add </a>"""\n    editlink = """<a href ="""+URL("inventory","itemedit")+"""/%s class="fa fa-fw fa-edit"></a>"""\n    #datatables\n    #http://www.pyguy.com/web2py/web2py-tutorial-using-the-datatable-jquery-grid-plugin-with-web2py/\n    #Cannot use this:\n    #item = json.dumps(db(db.item).select().as_list())\n    #Because we need the represented value, like "chemical Name"\n    #So we do this:\n    rows = db(db.item.id>0).select()\n    item = json.dumps([dict(id=r.id,Iname=r.Iname,Idisposalcode=r.Idisposalcode,Ipounds=r.Ipounds,Icontainer=r.Icontainer,Ishelf=r.Ishelf,editlink=editlink  % r.id) for r in rows.render()])#adding render to use represented view of fields\n\n    return dict(PageHeader=PageHeader,addbutton=XML(addbutton),results=XML(item))\n\ndef itemedit():\n    PageHeader = "Item"\n    cancelbutton = XML( """<a href ="""+URL("inventory","item")+""" class="btn btn-block btn-warning">Cancel </a>""")\n    fields=[\'Iname\', \'Iquantity\', \'Ireceptacle\', \'Icondition\', \'Icapacity\', \'Iamount\', \'Iunits\', \'Icomponents\', \'Icomments\', \'Icontainer\', \'Ishelf\']\n    if (request.args(0)): #UPDATE RECORD or INSERT RECORD\n        record = db.item(request.args(0)) or redirect(URL(\'error\'))\n        disposalcode = record.Idisposalcode #<<<<TODO Add onchange event\n        form = SQLFORM(db.item, record,fields=fields)\n    else:\n        form = SQLFORM(db.item,fields=fields)\n        disposalcode  = \'\'\n    form.add_button(\'Back\', URL(\'other_page\'))\n    #disposalcode = record.Idisposalcode #<<<<TODO Add onchange event\n    #Eplicitly list fields. When using {{=form.custom.widget.Ireceptacle}}, it will only show and edit listed fields\n    #By restricting edit fields, you avoid errors\n    #form = SQLFORM(db.item, record,fields=fields)\n\n    if form.process().accepted:\n       response.flash = \'form accepted\'\n       try:\n            record.update_record(**dict(form.vars))#record is updated\n            redirect(URL(\'item\'))\n       except NameError:\n            response.flash = \'record added\'\n            redirect(URL(\'item\'))\n    elif form.errors:\n       redirect(URL(form.errors))\n       response.flash = \'form has errors\'\n\n\n    return dict(PageHeader=PageHeader,cancelbutton=cancelbutton,form=form,disposalcode=disposalcode)\n\ndef container():\n    PageHeader = "Container"\n    rows = db(db.container.id>0).select()\n    #icon="""<a href="""+URL(\'inventory\',\'containeredit\')+"""/%s><div class="col-md-3 col-sm-4"><i class="fa fa-fw fa-edit"></i></div></a>"""\n    addbutton = """<a href ="""+URL("inventory","containeredit")+""" class="btn btn-block btn-success">Add </a>"""\n    editlink = """<a href ="""+URL("inventory","containeredit")+"""/%s class="fa fa-fw fa-edit"></a>"""\n    container = json.dumps([dict(id=r.id,ContNum=r.ContNum,PSN=r.PSN,OpenDate=str(r.OpenDate),CloseDate=str(r.CloseDate),cdisposalcode=r.cdisposalcode,cShipment=r.cShipment,editlink=editlink  % r.id) for r in rows.render()])#adding render to use represented view of fields\n    #form = SQLFORM(db.shipment,editable=True,)\n\n    return dict(PageHeader=PageHeader,addbutton=XML(addbutton),results=XML(container))\n\ndef containeredit():\n    cancelbutton = XML( """<a href ="""+URL("inventory","container")+""" class="btn btn-block btn-warning">Cancel </a>""")\n    \n    fields=[\'PSN\', \'OpenDate\', \'CloseDate\', \'Chemweight\', \'grossweight\', \'cdisposalcode\', \'Profile\', \'tsdf\', \'containertype\', \'containersize\', \'containerstyle\',\'containervolume\',\'containerconstruction\',\'ClosedBy\',\'cShipment\',\'cgenerator\',\'cCAwastecode\',\'cstatefedwastecode\',\'AccumulationStartDate\',\'ccontentscomposition\',\'cstate\', \'chazardousproperties\',\'RQ\',\'UNNA\',\'Descriptor\',\'TechnicalName\',\'HazDivision\',\'PGgroup\',\'PSNdescriptor\',\'inputnumber\']\n    if (request.args(0)): #UPDATE RECORD or INSERT RECORD\n        record = db.item(request.args(0)) or redirect(URL(\'error\'))\n        disposalcode = record.Idisposalcode #<<<<TODO Add onchange event\n        form = SQLFORM(db.container, record,fields=fields)\n    else:\n        form = SQLFORM(db.container,fields=fields)\n        disposalcode  = \'\'\n    form.add_button(\'Back\', URL(\'other_page\'))\n    #process form\n    if form.process().accepted:\n       response.flash = \'form accepted\'\n       try:\n            record.update_record(**dict(form.vars))#record is updated\n            redirect(URL(\'container\'))\n       except NameError:\n            response.flash = \'record added\'\n            redirect(URL(\'container\'))\n    elif form.errors:\n       redirect(URL(form.errors))\n       response.flash = \'form has errors\'\n        \n        \n        \n       \n    return dict(form=form,cancelbutton=cancelbutton,)\n\ndef shipment():\n    PageHeader = "Shipment"\n    rows = db(db.shipment.id>0).select()\n    addbutton = """<a href ="""+URL("inventory","shipmentedit")+""" class="btn btn-block btn-success">Add </a>"""\n    icon="""<a href="""+URL(\'inventory\',\'shipmentedit\')+"""/%s><div class="col-md-3 col-sm-4"><i class="fa fa-fw fa-edit"></i></div></a>"""\n    shipment = json.dumps([dict(id=r.id,Manifest=r.Manifest,editlink=icon  % r.id) for r in rows.render()])#adding render to use represented view of fields\n    #form = SQLFORM(db.shipment,editable=True,)\n\n    return dict(PageHeader=PageHeader,results=XML(shipment), addbutton=XML(addbutton))\ndef shipmentedit():\n    fields=[\'Manifest\',]\n    if (request.args(0)):\n        record = db.shipment(request.args(0)) or redirect(URL(\'error\'))\n        form = SQLFORM(db.shipment, record,fields=fields)\n        #redirect(URL(\'container\'))\n    else:\n        form = SQLFORM(db.shipment,fields=fields)\n        disposalcode  = \'\'\n        #redirect(URL(\'container\'))\n    form.add_button(\'Back\', URL(\'other_page\'))\n\n    if form.process().accepted:\n       response.flash = \'form accepted\'\n       try:\n            record.update_record(**dict(form.vars))#record is updated\n            redirect(URL(\'shipment\'))\n       except NameError:\n            response.flash = \'record added\'\n            redirect(URL(\'shipment\'))\n    elif form.errors:\n       redirect(URL(form.errors))\n       response.flash = \'form has errors\'\n\n    return dict(PageHeader=PageHeader,cancelbutton=cancelbutton,form=form)\n\ndef chemindex():\n    PageHeader = "Chemical Index"\n    icon="""<a href="""+URL(\'inventory\',\'chemindexedit\')+"""/%s><div class="col-md-3 col-sm-4"><i class="fa fa-fw fa-edit"></i></div></a>"""\n    addbutton = """<a href ="""+URL("inventory","chemindexedit")+""" class="btn btn-block btn-success">Add </a>"""\n    #db.chemindex.chazard.represent = render_docs\n    rows = db(db.chemindex.id>0).select()\n    chemindex = json.dumps([dict(id=r.id,chemname=r.chemname,cgroup=r.cgroup,cstate=r.cstate,cdisposalcode=r.cdisposalcode,tsdf=r.tsdf,treatment=r.treatment,chazwastecodes=r.chazwastecodes,chazard=r.chazard,editlink=icon  % r.id) for r in rows.render()])#adding render to use represented view of fields\n    return dict(PageHeader=PageHeader,results=XML(chemindex),addbutton=XML(addbutton))\n\n\ndef chemindexedit():\n    PageHeader = "Chemical Index"\n    fields=[\'chemname\', \'cprefix\', \'casnum\', \'cgroup\', \'cstate\', \'cdisposalcode\', \'cpacktype\', \'treatment\', \'chazwastecodes\', \'chazard\', \'components\',\'comments\']\n    if (request.args(0)): #UPDATE RECORD or INSERT RECORD\n        record = db.chemindex(request.args(0)) or redirect(URL(\'error\'))\n        #disposalcode = record.Idisposalcode #<<<<TODO Add onchange event\n        form = SQLFORM(db.chemindex, record,fields=fields)\n    else:\n        form = SQLFORM(db.chemindex,fields=fields)\n        disposalcode  = \'\'\n    form.add_button(\'Back\', URL(\'other_page\'))\n    cancelbutton = XML( """<a href ="""+URL("inventory","container")+""" class="btn btn-block btn-warning">Cancel </a>""")\n\n    \n    #response.files.append(URL(r=request,c=\'static/multiselect\',f=\'jquery.multiSelect.js\'))\n    #response.files.append(URL(r=request,c=\'static/multiselect\',f=\'jquery.multiSelect.css\'))\n\n    if form.process().accepted:\n       response.flash = \'form accepted\'\n       try:\n            record.update_record(**dict(form.vars))#record is updated\n            redirect(URL(\'chemindex\'))\n       except NameError:\n            response.flash = \'record added\'\n            redirect(URL(\'chemindex\'))\n    elif form.errors:\n       redirect(URL(form.errors))\n       response.flash = \'form has errors\'\n    return dict(PageHeader=PageHeader,cancelbutton=cancelbutton,form=form)\n\nresponse._vars=response._caller(containeredit)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/restricted.py", line 227, in restricted\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/controllers/inventory.py", line 175, in <module>\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/globals.py", line 412, in <lambda>\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/controllers/inventory.py", line 75, in containeredit\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/objects.py", line 542, in __call__\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/objects.py", line 2025, in select\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/base.py", line 1293, in select\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/base.py", line 1250, in _select_aux\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/base.py", line 1385, in execute\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/base.py", line 1379, in log_execute\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/contrib/pymysql/cursors.py", line 117, in execute\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\nInternalError: (1054, u"Unknown column \'item.inputnumber\' in \'field list\'")\n'
p11
s.
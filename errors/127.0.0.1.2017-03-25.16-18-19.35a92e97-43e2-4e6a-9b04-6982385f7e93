(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.InternalError\'> (1054, u"Unknown column \'None.hazard\' in \'field list\'")'
p3
sS'layer'
p4
S'/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/controllers/inventory.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# try something like\nfrom gluon.custom_import import track_changes; track_changes(True)\nfrom cwp_htmlhelpers import cwpeditlink\nimport cwp_functions\n\n\n#must use this for list fields to show rendered value, instead of record ids\ndef render_docs(ids,row):\n      doc=""\n      for id in ids:\n         doc = doc+db.hazard(id).hazardabbrev+" "#db.wbdocuments(id)\n      return doc\n\ndef index():\n    PageHeader = ""\n    #grid = SQLFORM.grid(db.item)\n\n    return dict(PageHeader=PageHeader,grid=grid)\nimport json\ndef item():\n    PageHeader = "Item"\n    addbutton = """<a href ="""+URL("inventory","itemedit")+""" class="btn btn-block btn-success">Add </a>"""\n    editlink = """<a href ="""+URL("inventory","itemedit")+"""/%s class="fa fa-fw fa-edit"></a>"""\n    #datatables\n    #http://www.pyguy.com/web2py/web2py-tutorial-using-the-datatable-jquery-grid-plugin-with-web2py/\n    #Cannot use this:\n    #item = json.dumps(db(db.item).select().as_list())\n    #Because we need the represented value, like "chemical Name"\n    #So we do this:\n    rows = db(db.item.id>0).select()\n    \n \n    #cannot use render, because need r.name as number to calculate disposal code by function, so use direct references for remainder of fields that need represent\n    #added test if related record exists, example: if r.container else "", so no error if there is no related record\n    item = json.dumps([dict(id=r.id,name=r.name.chemname if r.name else "",disposalcode=cwp_functions.returndisposalcode(r.name),pounds=r.pounds,container=r.container.contnum if r.container else "",shelf=r.shelf.shelfcode if r.shelf else "",editlink=editlink  % r.id) for r in rows])# do not rows.render()\n    return dict(PageHeader=PageHeader,addbutton=XML(addbutton),results=XML(item))\n\n\ndef itemedit():\n    PageHeader = "Item"\n    chemname=disposalcode=""\n    chemid = 0\n    cancelbutton = XML( """<a href ="""+URL("inventory","item")+""" class="btn btn-block btn-warning">Cancel </a>""")\n    db.item.container.represent = lambda container, row: container+"hey"\n    fields=[\'name\', \'quantity\', \'receptacle\', \'condition_\', \'capacity\', \'amount\', \'units\', \'components\', \'comments\', \'container\', \'shelf\']\n    if (request.args(0)): #UPDATE RECORD or INSERT RECORD\n        record = db.item(request.args(0)) or redirect(URL(\'error\'))\n        \n        disposalcode=cwp_functions.returndisposalcode(record.name) #get disposalcode string\n        #disposalcode = record.disposalcode #<<<<TODO Add onchange event\n        chemname = record.name.chemname\n        chemid = record.name\n        item_id = record.id\n        form = SQLFORM(db.item, record,fields=fields)\n\n    #FIX if there is no shelf\n    # labeltext = "Hazardous Waste    Accum. Date: "+"1-1-1907"+"\\n"+"Item: "+str(record.id)+"       "+"Shelf:"+str(record.shelf.shelfcode)+"\\n"+str(record.name.chemname)+"\\n"+str(record.disposalcode)#Dymo Label\n        labeltext =\'\'\n    else: # ADD RECORD\n        form = SQLFORM(db.item,fields=fields)\n        disposalcode  = \'\'\n        labeltext = \'\'\n        item_id = 0\n    form.add_button(\'Back\', URL(\'other_page\'))\n    #disposalcode = record.disposalcode #<<<<TODO Add onchange event\n    #Eplicitly list fields. When using {{=form.custom.widget.Ireceptacle}}, it will only show and edit listed fields\n    #By restricting edit fields, you avoid errors\n    #form = SQLFORM(db.item, record,fields=fields)\n\n    if form.process().accepted:\n        response.flash = \'form accepted\'\n        try:\n            record.update_record(**dict(form.vars))#record is updated\n            redirect(URL(\'item\'))\n        except NameError:\n            response.flash = \'record added\'\n            redirect(URL(\'item\'))\n    elif form.errors: #name is None\n        redirect(URL(\'item\'))\n    \n    #using web2py built-in helper "A" \n    topactionbutton1 = A(DIV(\' Print Label\', _class=\'fa fa-print\'), _class=\'btn btn-block btn-default btn-xs\', _id="printButton", target=\'target1\')\n    #ID,Chemname,DisposalCode,AccumulationStartDate,Shelf,PrimaryHazard\n    #shelveAnchor is used for Javascript on page to change the chemindex id, to calculate new disposal code\n    topactionbutton2 = A(DIV(\' Shelve Item\', _class=\'fa fa-sign-in\'), _id=\'shelveAnchor\', _class=\'btn btn-block btn-default btn-xs\', component=URL(\'shelve\'+\'?item_id=\'+str(item_id)+\'&item_chemid=\'+str(chemid)), target=\'target1\')\n    \n    return dict(PageHeader=PageHeader,cancelbutton=cancelbutton,form=form,disposalcode=disposalcode, labeltext=labeltext,chemname=chemname,chemid=chemid,item_id=item_id,topactionbutton1=topactionbutton1,topactionbutton2=topactionbutton2)\n\ndef container():\n    PageHeader = "Container"\n    rows = db(db.container.id>0).select()\n    #icon="""<a href="""+URL(\'inventory\',\'containeredit\')+"""/%s><div class="col-md-3 col-sm-4"><i class="fa fa-fw fa-edit"></i></div></a>"""\n    addbutton = """<a href ="""+URL("inventory","containeredit")+""" class="btn btn-block btn-success">Add </a>"""\n    editlink = """<a href ="""+URL("inventory","containeredit")+"""/%s class="fa fa-fw fa-edit"></a>"""\n    container = json.dumps([dict(id=r.id,contnum=r.contnum,psn=r.psn,opendate=str(r.opendate),closedate=str(r.closedate),disposalcode=r.disposalcode,shipment=r.shipment,editlink=editlink  % r.id) for r in rows.render()])#adding render to use represented view of fields\n    #form = SQLFORM(db.shipment,editable=True,)\n\n                 \n          \n    return dict(PageHeader=PageHeader,addbutton=XML(addbutton),results=XML(container))\n\ndef containeredit():\n    cancelbutton = XML( """<a href ="""+URL("inventory","container")+""" class="btn btn-block btn-warning">Cancel </a>""")\n    fields=[\'psn\', \'opendate\', \'closedate\', \'chemweight\', \'grossweight\', \'disposalcode\', \'profile\', \'tsdf\', \'containertype\', \'containersize\', \'containerstyle\',\'containervolume\',\'containerconstruction\',\'closedby\',\'shipment\',\'generator\',\'statewastecode\',\'fedwastecode\',\'accumulationstartdate\',\'contentscomposition\',\'cstate\', \'hazardousproperties\',\'rq\',\'unna\',\'descriptor\',\'technicalname\',\'hazdivision\',\'pggroup\',\'psndescriptor\',\'contnum\']\n    if (request.args(0)): #UPDATE RECORD\n        record = db.container(request.args(0)) or redirect(URL(\'error\'))\n        form = SQLFORM(db.container, record,fields=fields)\n    else: #or INSERT RECORD\n        form = SQLFORM(db.container,fields=fields)\n    form.add_button(\'Back\', URL(\'other_page\'))\n    #process form\n    if form.process().accepted:\n       response.flash = \'form accepted\'\n       try:\n            record.update_record(**dict(form.vars))#record is updated\n            redirect(URL(\'container\'))\n       except NameError:\n            response.flash = \'record added\'\n            redirect(URL(\'container\'))\n    elif form.errors:\n       redirect(URL(form.errors))\n       response.flash = \'form has errors\'\n    return dict(form=form,cancelbutton=cancelbutton,)\n\ndef shipment():\n    PageHeader = "Shipment"\n    rows = db(db.shipment.id>0).select()\n    addbutton = """<a href ="""+URL("inventory","shipmentedit")+""" class="btn btn-block btn-success">Add </a>"""\n    icon="""<a href="""+URL(\'inventory\',\'shipmentedit\')+"""/%s><div class="col-md-3 col-sm-4"><i class="fa fa-fw fa-edit"></i></div></a>"""\n    shipment = json.dumps([dict(id=r.id,manifest=r.manifest,editlink=icon  % r.id) for r in rows.render()])#adding render to use represented view of fields\n    #form = SQLFORM(db.shipment,editable=True,)\n\n    return dict(PageHeader=PageHeader,results=XML(shipment), addbutton=XML(addbutton))\ndef shipmentedit():\n    fields=[\'manifest\',]\n    if (request.args(0)):\n        record = db.shipment(request.args(0)) or redirect(URL(\'error\'))\n        form = SQLFORM(db.shipment, record,fields=fields)\n        #redirect(URL(\'container\'))\n    else:\n        form = SQLFORM(db.shipment,fields=fields)\n        disposalcode  = \'\'\n        #redirect(URL(\'container\'))\n    form.add_button(\'Back\', URL(\'other_page\'))\n\n    if form.process().accepted:\n       response.flash = \'form accepted\'\n       try:\n            record.update_record(**dict(form.vars))#record is updated\n            redirect(URL(\'shipment\'))\n       except NameError:\n            response.flash = \'record added\'\n            redirect(URL(\'shipment\'))\n    elif form.errors:\n       redirect(URL(form.errors))\n       response.flash = \'form has errors\'\n\n    return dict(PageHeader=PageHeader,cancelbutton=cancelbutton,form=form)\nimport gluon.contrib.simplejson\ndef chemindex():\n    PageHeader = "Chemical Index"\n    icon="""<a href="""+URL(\'inventory\',\'chemindexedit\')+"""/%s><div class="col-md-3 col-sm-4"><i class="fa fa-fw fa-edit"></i></div></a>"""\n    addbutton = """<a href ="""+URL("inventory","chemindexedit")+""" class="btn btn-block btn-success">Add </a>"""\n    #db.chemindex.hazard.represent = render_docs # list fields to show rendered value, instead of record ids\n    #Get chemical hazard list from intermediate table\n    #chemassoc_rows = db(db.chemindex_hazard_association.chemindex_id == record.id).select(orderby=db.chemindex_hazard_association.hazard_order)\n    \n    #Normalized hazard list\n     ###SO SLOW!!!!\n    #Calculating disposalcode and hazard takes too long\n    \n    rows = db(db.chemindex.id>0).select(db.chemindex.id,db.chemindex.chemname,db.chemindex.group_,db.chemindex.state,db.chemindex.tsdf,db.chemindex.treatment,db.chemindex.hazwastecodes,db.chemindex.disposalcode,db.chemindex.hazard).as_list()\n    \n    #chemindex = json.dumps([dict(id=r.id,chemname=r.chemname,group=r.group_,state=r.state,disposalcode=r.id,tsdf=r.tsdf,treatment=r.treatment,hazard=r.id,hazwastecodes=r.hazwastecodes,editlink=icon  % r.id) for r in rows.render()])#adding render to use\n#cwp_functions.returndisposalcode(r.id)\n\n\n\n    #represented view of fields\n    return dict(PageHeader=PageHeader,results=XML(gluon.contrib.simplejson.dumps(rows)),addbutton=XML(addbutton))\n\n\ndef chemindexedit():\n    hprint=\'\'\n    PageHeader = "Chemical Index"\n    hazardlist =\'\' #hazard list is the potential hazads from hazard table\n    chemhazardlist= \'\' #chemhazardlist is the actual hazards associated with the chemical reflected in the chemindex_hazard_association table\n    \n    \n    # (1) Get available hazards - make ordered list for jquery sortable to pull from\n    hazards = [(r.id, r.hazardname) for r in db(db.hazard).select(orderby=db.hazard.hazard_order)]\n    hazardid, hazardname = zip(*hazards)#seperate into two lists\n    #Create HTML unordered list\n    for idx, r in enumerate(hazardid):\n        hazardlist += str(LI(hazardname[idx], _class=\'ui-state-default ui-sortable-handle\', _id=hazardid[idx]))\n    fields=[\'chemname\', \'casnum\', \'group_\', \'state\', \'disposalcode\', \'packtype\', \'treatment\',\'components\', \'hazwastecodes\', \'comments\']#\n    if (request.args(0)): #UPDATE RECORD or INSERT RECORD\n        record = db.chemindex(request.args(0)) or redirect(URL(\'error\'))\n        #disposalcode = record.Idisposalcode #<<<<TODO Add onchange event\n\n        #Add a hidden field hazard_list to return the result of the Chemical Hazard unordered list\n        #Pass value = blank\n        #If hazard_list gets value, it means the sortable list as changed, and associations should be updated\n        form = SQLFORM(db.chemindex, record,fields=fields,hidden=dict(hazard_list=\'\'))\n        #NORMALIZED\n        rows = db(db.chemindex_hazard_association.chemindex_id == record.id).select(orderby=db.chemindex_hazard_association.hazard_order)\n        for row in rows:\n            chemhazardlist += str(LI(row.hazard_id.hazardname, _class=\'ui-state-default ui-sortable-handle\', _id=row.hazard_id))\n            \n\n\n            \n        #NOT USED!!!\n        #hlist=str(record.hazard)\n        \n        #for number in record.hazard: #build hazard list for disposal code\n        #    #row = db(db.chemindex.id == int(request.vars.name)).select().first()\n        #    row = db(db.hazard.id == int(number)).select().first()\n        #    hprint=hprint+row.hazardabbrev\n        #hazrows = db.hazard.id.contains(hlist, all=True)\n        #recid = row.group[:2].upper()+\'-\'+row.state.upper()+hprint\n\n\n    else:#ADD NEW RECORD\n        form = SQLFORM(db.chemindex,fields=fields,hidden=dict(hazard_list=\'\'))\n        disposalcode  = \'\'\n    form.add_button(\'Back\', URL(\'other_page\'))\n    cancelbutton = XML( """<a href ="""+URL("inventory","container")+""" class="btn btn-block btn-warning">Cancel </a>""")\n\n    if form.process().accepted:\n       response.flash = \'form accepted\'\n       try:\n            #update hazard list\n            ohazard_list = []\n            hazard_list=(request.vars.hazard_list)\n            if(hazard_list!=\'\'): #the chemical hazard sortable UL was modified\n                ohazard_list=hazard_list.split(",") # create ordered list\n                db(db.chemindex_hazard_association.chemindex_id==form.vars.id).delete() #Delete all associations for chemindexid\n                for index, hazardid in enumerate(ohazard_list):\n                    db.chemindex_hazard_association.insert(chemindex_id=form.vars.id,hazard_id=hazardid,hazard_order=index)    \n            record.update_record(**dict(form.vars))#record is updated\n            redirect(URL(\'chemindex\')+str(ohazard_list))\n            \n         \n       except NameError:\n         \n        \n            response.flash = \'record added\'\n            redirect(URL(\'chemindex\'))\n    elif form.errors: #problems with required fields\n       redirect(URL(form.errors))\n       response.flash = \'form has errors\'\n\n\n    \n    return dict(PageHeader=PageHeader,cancelbutton=cancelbutton,form=form,hprint=hprint,chemhazardlist=XML(chemhazardlist),hazardlist=XML(hazardlist))\n\n\ndef shelve():\n    #use this to control the dropdown on the item edit page.\n    #That way, the user has to save the record for changes to take place.\n    #otherwise, cancels\n    responsestr = "no"\n    chemhazardlistc=""\n    item_id=request.vars.item_id\n    item_chemid=request.vars.item_chemid\n    if ((item_id > "") & (item_chemid > "")):\n        chemindex_row = db(db.chemindex.id == int(item_chemid)).select().first() #should be only one\n        disposalcode=cwp_functions.returndisposalcode(chemindex_row.id) #get disposalcode string\n        row = db(db.shelf.disposalcode == disposalcode).select().first()#get the first one. Could reduce by creation date or shelf number\n    if row is None:\n        #user alert of change\n        responsestr = "No shelf found"\n        #javascript making change\n        response.js = "var element = document.getElementById(\'item_shelf\');element.value = 0;"\n    else:\n        #user alert of change\n        responsestr = "Item shelved"\n        #javascript making change\n        response.js =  ("var element = document.getElementById(\'item_shelf\');element.value = %s;" % row.id)\n    return (responsestr)\n\nresponse._vars=response._caller(chemindex)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/restricted.py", line 227, in restricted\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/controllers/inventory.py", line 284, in <module>\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/globals.py", line 417, in <lambda>\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/controllers/inventory.py", line 173, in chemindex\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/objects.py", line 2020, in select\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/base.py", line 1296, in select\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/base.py", line 1253, in _select_aux\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/base.py", line 1388, in execute\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/base.py", line 1382, in log_execute\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/contrib/pymysql/cursors.py", line 117, in execute\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\nInternalError: (1054, u"Unknown column \'None.hazard\' in \'field list\'")\n'
p11
s.
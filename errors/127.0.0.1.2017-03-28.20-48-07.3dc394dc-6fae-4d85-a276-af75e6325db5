(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.ProgrammingError\'> (1064, u"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'-1 OFFSET 0\' at line 1")'
p3
sS'layer'
p4
S'/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/controllers/serverprocessing.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# This is for the Datatables Service Side Processing\n# Expects ajax calls, returns json\n\nimport json\nimport cwp_functions\ndef chemindex(): \n    icon="""<a href="""+URL(\'inventory\',\'shipmentedit\')+"""/%s><div class="col-md-3 col-sm-4"><i class="fa fa-fw fa-edit"></i></div></a>"""\n    tablecount = db(db.chemindex).count()\n    icon = "%s"\n\n    rows = db(db.chemindex.id<10).select(db.chemindex.id,db.chemindex.chemname,db.chemindex.group_,db.chemindex.state,db.chemindex.tsdf,db.chemindex.treatment,db.chemindex.hazwastecodes)\n    rowscount = len(rows)\n    chemindex = """{"draw": 1,"recordsTotal": """+str(tablecount)+""","recordsFiltered": """+str(rowscount)+""","data":"""\n    chemindex += json.dumps([dict(id=r.id,chemname=r.chemname,group=r.group_,state=r.state,disposalcode=r.id,tsdf=r.tsdf,treatment=r.treatment,hazard=r.id,hazwastecodes=r.hazwastecodes,editlink=icon  % r.id) for r in rows.render()])#adding render to use represented view of fields\n    #chemindex = json.dumps([dict(id=r.id,chemname=r.chemname,group=r.group_,state=r.state,disposalcode=r.id,tsdf=r.tsdf,treatment=r.treatment,hazard=r.id,hazwastecodes=r.hazwastecodes,editlink=icon  % r.id) for r in rows.render()])#adding render to use\n    chemindex += """}"""\n    return (chemindex)\ndef shipment():\n  \n    fields=[\'id\',\'manifest\']\n    textfields=[\'manifest\']\n    orderfields = [\'id\',\'manifest\']#Statically set column list. Could use Datatables return instead\n    sel=[db.shipment[field] for field in fields] \n    #orderby = [db.shipment[orderfield] for orderfield in orderfields] #could be used for multi-level sort\n    orderby = [db.shipment[orderfields[1]]] \n    #Receive datatables parameters\n    if(request.vars.draw):#pass this back to increment\n        drawint=int(request.vars.draw)\n    else:\n        drawint=0\n    if(request.vars.start):\n        dtstart = int(request.vars.start)#sanitation of input to int\n    else:\n        dtstart=0\n    if(request.vars.length):\n        dtlength = int(request.vars.length)\n    else:\n        dtlength=10\n    #Search Value\n    searchval=request.vars.get(\'search[value]\', None) \n    if(searchval):\n        dtsearch = searchval\n    else:\n        dtsearch=\'\'\n        \n    #Order Column\n    ordercol=request.vars.get(\'order[0][column]\', None) \n    if(ordercol):\n        #get the column number\n        dtorder = int(ordercol)\n        #get the order direction\n\n        #Order Direction\n        orderdir=request.vars.get(\'order[0][dir]\', None) \n        if (orderdir=="asc"):\n            #build order statement - this is for single sort. Could implement multisort\n           orderby = [db.shipment[orderfields[dtorder]]]\n        else:\n           orderby = [~db.shipment[orderfields[dtorder]]]\n    else:\n        dtorder=\'0\'\n    tablecount = db(db.shipment).count()\n    #Add to select orderby=myorder\n    #Sample:        #    #orderby=\'sum(items.price)  desc\',limitby=(0,10)\n    #Default Query\n    if (dtsearch):\n        query=[db.shipment[field].contains(dtsearch) for textfield in textfields] \n    else:\n        query=[db.shipment]\n    rows = db(*query).select(*sel, orderby=orderby, limitby=(dtstart,-1))#, limitby=(dtstart,dtlength)\n    \n    #Custom Query\n    #\'\'.join(\'%s dtsearch % level for level in fields)\n    #db.mytable.myfield.contains(\'value\')\n    #rows = db(db.shipment.id=="something").select(*sel, orderby=orderby, limitby=(dtstart,dtlength))\n    \n    rowscount = len(rows)\n    #icon="""<a href="""+URL(\'inventory\',\'shipmentedit\')+"""/%s><div class="col-md-3 col-sm-4"><i class="fa fa-fw fa-edit"></i></div></a>"""\n    icon = str(dtorder)+"%s"\n    #Use for row in rows[0:10].render()\n    # iTotalRecords = total records without any filtering/limits\n    #iTotalDisplayRecords = filtered result count\n    shipment = """{"draw": """+str(drawint)+""", "recordsTotal": """+str(tablecount)+""", "recordsFiltered": """+str(rowscount)+""","data":"""\n    shipment += json.dumps([dict(id=r.id,manifest=r.manifest,editlink=icon  % r.id) for r in rows.render()])#adding render to use represented view of fields\n    #shipment += json.dumps(dict(id=r.id,manifest=r.manifest,editlink=icon  % r.id) for r in rows.render())#adding render to use represented view of fields\n    shipment += """}"""\n               \n    return (shipment) \n\n                           \n                           \n    #shipment = json.dumps([dict(id=r.id,manifest=r.manifest,editlink=icon  % r.id) for r in rows.render()])#adding render to use represented view of fields\n\nresponse._vars=response._caller(shipment)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/restricted.py", line 227, in restricted\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/controllers/serverprocessing.py", line 95, in <module>\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/globals.py", line 417, in <lambda>\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/controllers/serverprocessing.py", line 71, in shipment\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/objects.py", line 2020, in select\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/base.py", line 1296, in select\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/base.py", line 1253, in _select_aux\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/base.py", line 1388, in execute\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/adapters/base.py", line 1382, in log_execute\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/contrib/pymysql/cursors.py", line 117, in execute\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\nProgrammingError: (1064, u"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \'-1 OFFSET 0\' at line 1")\n'
p11
s.
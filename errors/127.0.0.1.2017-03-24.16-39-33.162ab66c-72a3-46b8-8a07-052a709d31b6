(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> Error in URI 'BearFacts' or database not supported"
p3
sS'layer'
p4
S'/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n## app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n#Put a file in the root level of web2py, alongside the applications folder, with the connection string\n#example connection string = mysql://db_user:Password!@localhost/chemwastepro\nfile = open(\'chemwasteproconnectionstring.txt\', \'r\')\nconnectionstring = file.readline().rstrip(\'\\n\') #strip newline just in case\nfile.close()\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    #db = DAL(myconf.take(\'db.uri\'), pool_size=myconf.take(\'db.pool_size\', cast=int), check_reserved=[\'all\'])\n    db = DAL(connectionstring,migrate=False,lazy_tables=True)\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore+ndb\')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n    \n#add the db object to the current thread local object, which can then be imported and accessed within the modules\nfrom gluon import current\ncurrent.db = db\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## choose a style for forms\nresponse.formstyle = myconf.take(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.take(\'forms.separator\')\n\n\n#Security stuff. Make sure your web server is set to HTTPS only.\nresponse.headers[\'X-Frame-Options\'] = "SAMEORIGIN"\nresponse.headers[\'Content-Security-Policy\'] = "frame-ancestors \'self\'"\n#session._secure=True # Sets cookies to "HTTPOnly; Secure" # this only works if the site is HTTPS\n#response.headers[\'Strict-Transport-Security\'] = "max-age=31536000" # this only works if the site is HTTPS\n\n\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n## (optional) static assets folder versioning\n# response.static_version = \'0.0.0\'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Service, PluginManager\n\nauth = Auth(db)\nservice = Service()\nplugins = PluginManager()\n\n## create all tables needed by auth if not custom tables\n#auth.define_tables(username=False, signature=False)\n\n## configure emails\n#mail = auth.settings.mailer\n#mail.settings.server = \'logging\' if request.is_local else myconf.take(\'smtp.server\')\n#mail.settings.sender = myconf.take(\'smtp.sender\')\n#mail.settings.login = myconf.take(\'smtp.login\')\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n##Define some globals\nPageHeader = ""\ntopactionbutton1 = ""\ntopactionbutton2 = ""\ntopactionbutton3 = ""\ntopactionbutton4 = ""\nenterbutton = cancelbutton = \'\'\n\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n\n## This database structure uses "list:reference" which is a means to de-normalize many to many tables.\n#http://web2py.com/books/default/chapter/29/6#list--type--and-contains\n#This makes the database structure simpler by avoiding junction tables\n#web2py the "list:reference" is a string with bar delimiters between the record id, example "|1|2|"\n\n    #Multi-select code\n    #http://www.web2pyslices.com/slice/show/1395/jquery-multi-select-widget\n\n# Naming Scheme\n# use prefix "c" for child tables, like units.\n\n\ndb.define_table(\'state\', # NOT USED?\n                Field(\'name\',\'string\'),\n                format=\'%(name)s\'\n               )\ndb.define_table(\'receptacle\',\n                Field(\'name\',\'string\'),\n                format=\'%(name)s\'\n               )\ndb.define_table(\'units\',\n                Field(\'name\',\'string\'),\n                format=\'%(name)s\'\n               )\n\n#\'condition\' is a reserved word in SQL, so we use \'condition_\' per the Python style guide\ndb.define_table(\'condition_\',\n                Field(\'name\',\'string\'),\n                format=\'%(name)s\'\n               )\n#Conversions are needed to match shipping requirements. For example, asbestos may be collected as pounds, but shipped as yards\n#Also, billing may be based on a fixed unit, like gallons\ndb.define_table(\'conversions\',\n                Field(\'unitsfrom\', \'reference units\'),\n                Field(\'conversionfactor\', \'decimal(65,10)\'),\n                format=\'%(name)s\'\n               )\n#The TSDF and Treatment codes purpose are twofold.\n# First to segregate chemicals for storage, lab packing and shipping\n# Second to use the codes to complete the Federal Regulation Biennial Report (also known as the Hazardous Waste Report)\n#TSDF = Hazardous Waste Treatment, Storage, and Disposal Facility\ndb.define_table(\'tsdf\',\n                Field(\'tsdfname\',\'string\'),\n                Field(\'tsdfnumber\',\'string\'),\n\n                format=\'%(tsdfname)s\'\n                )\n#Treatment codes come from http://www3.epa.gov/epawaste/hazard/transportation/manifest/pdf/codes.pdf\ndb.define_table(\'treatment\',\n                Field(\'treatmentname\',\'string\'),\n                #Hazardous Waste Report TreatmentCode\n                Field(\'treatmentcode\',\'string\',length=\'4\'),\n                Field(\'treatnameabbrev\',\'string\',length=\'10\'),\n                format=\'%(treatnameabbrev)s\'\n                )\ndb.define_table(\'hazard\',\n                Field(\'hazardname\',\'string\'),\n                Field(\'hazard_order\',\'integer\'),\n                Field(\'hazardabbrev\',\'string\'),\n                format=\'%(hazardname)s\'\n                )\ndb.define_table(\'fedwastecode\',\n                Field(\'code\',\'string\',length=\'4\'),\n                Field(\'wastedescription\',\'string\'),\n                format=\'%(code)s%(wastedescription)s\'\n               )\ndb.define_table(\'unna\',\n                Field(\'name\',type=\'string\'),\n                Field(\'unna\',type=\'string\'),\n                )\n\ndb.define_table(\'chemindex\',\n                Field(\'id\',\'id\'),\n                Field(\'chemname\',\'string\'),\n                #Field(\'chemname\',\'string\', requires=IS_NOT_EMPTY())\n                #Field(\'prefix\',\'string\'),\n                #Field(\'cmidfix\',\'string\'),\n                #Field(\'csuffix\',\'string\'),\n                Field(\'casnum\',\'string\'),\n                Field(\'state\',\'string\'),\n                Field(\'group_\',\'string\'), #MYSQL reserved word, trailing underscore\n                # The disposal code uses a nested lambda\n                # the first lamda using record r computes the value for the field\n                #the second lambda using v joins the values from the chazard field which contains a list\n                #iterating with lambda\n                #[v * 5 for v in x]\n                #is the same as\n                #y = map(lambda v : v+\'-\', x) - which is a dash separated list\n                #use join to concatenate the list using a comma\n                #\',\'.join(lst)\n                #So just the hazard part of the disposal code is compute=lambda r: \',\'.join(map(lambda v : db.hazard[v].hazardabbrev , r[\'chazard\'])))\n                \n                #DONT USE - Try to compute Disposal Code dynmaically in every case\n                Field(\'disposalcode\',compute=lambda r: cwp_functions.returndisposalcode(r[\'id\'])),\n                Field(\'tsdf\',\'reference tsdf\'),\n                Field(\'treatment\',\'reference treatment\'),\n                Field(\'hazwastecodes\',compute=lambda r: \',\'.join(map(lambda v : db.fedwastecode[v].code , r[\'fedwastecode\']))),\n                #list:reference is a way to introduce many to many relationship without using join table\n                #list can be reordered. For example, 1=Flammable, 2 = Corrosive\n                #list is ordered on creation\n                #[\'1\',\'2\'] list can be reordered to reflect Corrosive,Flammable = [\'2\',\'1\']\n                #Field(\'hazard\',\'list:string\', requires = IS_EMPTY_OR(IS_IN_DB(db,\'hazard.id\', db.hazard._format,multiple=True))),\n                #State Hazardous Waste Codes - http://www3.epa.gov/epawaste/inforesources/data/br13/br13-specification.pdf\n                Field(\'fedwastecode\',\'list:string\', requires = IS_EMPTY_OR(IS_IN_DB(db,\'fedwastecode.id\', db.fedwastecode._format,multiple=True))), #like D001, D002\n                Field(\'dotpsn\',\'boolean\'), #Department of Transportation Proper Shipping Name - if checked, do not edit name\n                Field(\'packtype\',\'string\', default=\'\'),\n                Field(\'comments\',\'text\'),\n                Field(\'components\',\'text\'),# similar to mixture\n                Field(\'unna\',\'reference unna\'),# United Nations/United State List of Hazardous Materials\n                Field(\'pg\',\'string\'), #Packing Group\n                format=\'%(chemname)s\',\n               )\ndb.chemindex.packtype.requires=IS_EMPTY_OR(IS_IN_SET((\'\',\'LP\',\'BU\')))\ndb.chemindex.tsdf.requires = IS_EMPTY_OR(IS_IN_DB(db,\'tsdf.id\',\'%(tsdfname)s\'))\ndb.chemindex.treatment.requires = IS_EMPTY_OR(IS_IN_DB(db,\'treatment.id\',\'%(treatnameabbrev)s\'))\ndb.chemindex.group_.requires=IS_EMPTY_OR(IS_IN_SET((\'Inorganic\',\'Organic\'))) # IN = Inorganic, OR = Organic\ndb.chemindex.state.requires=IS_EMPTY_OR(IS_IN_SET((\'Solid\',\'Liquid\',\'Gas\')))\ndb.chemindex.unna.requires = IS_EMPTY_OR(IS_IN_DB(db,\'unna.id\',\'%(unna)s\'))\n\n#Reference http://blog.jotbe-fx.de/articles/2522/web2py-Normalized-many-to-many-model-with-multiselect-drop-down\ndb.define_table(\'chemindex_hazard_association\',\n                Field(\'chemindex_id\', \'reference chemindex\'),\n                Field(\'hazard_id\', \'reference hazard\'),\n                Field(\'hazard_order\', \'integer\'),\n               )\n\n#db.chemindex.hazards_st = Field.Method(lambda id,row:db(db.chemindex_hazard_association.chemindex_id == row.id).select().first().hazard_id)\n\ndb.define_table(\'psn\', # Proper Shipping Name\n                Field(\'propershippingname\',type=\'string\',\n                      required=True),\n                format=\'%(propershippingname)s\'\n               )\n\n#Physical hazardous waste storage cabinets\n#TODO - should also segregate by Inorganic / Organic\n#Cannot use just Hazard\ndb.define_table(\'cabinet\',\n                Field(\'name\',\'string\'),\n                Field(\'cabinetcode\',\'reference hazard\'),\n                Field(\'group_\',\'string\'), #MYSQL reserved word, trailing underscore\n                )\n# ALLOW EMPTY??? Or require cabinet group\ndb.cabinet.group_.requires=IS_EMPTY_OR(IS_IN_SET((\'Inorganic\',\'Organic\'))) # IN = Inorganic, OR = Organic\n\n#Physical shelves or tubs inside the cabinets\ndb.define_table(\'shelf\',\n                Field(\'shelfcode\',\'string\',default=""),\n                Field(\'disposalcode\',\'string\'),\n                Field(\'scabinet\',\'reference cabinet\'),\n                format=\'%(shelfcode)s\'\n               )\ndb.shelf.scabinet.requires = IS_IN_DB(db,\'cabinet.id\',\'%(name)s\')#make drop down list of cabinets\n\n#drum, pallet, bin\ndb.define_table(\'shipment\',\n                Field(\'manifest\',type=\'string\',\n                      required=True),\n                format=\'%(manifest)s\'\n               )\ndb.define_table(\'containertype\',\n                Field(\'containertypecode\',type=\'string\',required=True),\n                Field(\'name\',type=\'string\'),\n                format=\'%(containertypecode)s - %(name)s\'\n               )\n\n# If you have more than one EPA ID number site shipping Hazardous Waste Manifests\ndb.define_table(\'generator\',\n                Field(\'name\',type=\'string\'),\n                Field(\'epaid\',type=\'string\'), #Environmental Protection Agency Identification Number\n                Field(\'address\',type=\'string\'),\n                )\n\ndb.define_table(\'container\',\n                Field(\'contnum\',\'string\',default="1000"),#an alphanumeric identifier for container. Regulations say drum number must be unique per shipment\n                Field(\'psn\',\'reference psn\'), #PSN= Proper Shipping Name\n                Field(\'opendate\',\'date\'),\n                Field(\'closedate\',\'date\'),\n                Field(\'accumulationstartdate\',\'date\'),\n                Field(\'chemweight\',\'decimal(65,2)\'),\n                Field(\'grossweight\',\'decimal(65,2)\'),\n                Field(\'disposalcode\',\'string\'),\n                Field(\'profile\',\'string\'), #Waste profile from TSDF\n                Field(\'tsdf\',\'reference tsdf\'),\n                Field(\'containertype\',\'reference containertype\'), # from regulations\n                Field(\'containersize\',\'string\'), #standard measurement, example 55Gal drum\n                Field(\'containervolume\',\'integer\'),\n                Field(\'containerstyle\',\'string\'),\n                Field(\'containerconstruction\',\'string\'),\n                Field(\'closedby\',\'string\'),\n                Field(\'statewastecode\',\'string\'),#california waste code\n                Field(\'fedwastecode\',\'list:string\', requires = IS_IN_DB(db,\'fedwastecode.id\', db.fedwastecode._format,multiple=True)), #like D001, D002\n                Field(\'shipment\',\'reference shipment\'),\n                Field(\'generator\',\'reference generator\'),\n                Field(\'contentscomposition\',\'string\'),\n                Field(\'cstate\',\'string\'),\n                Field(\'rq\',\'boolean\'), # Reportable Quantity\n                Field(\'unna\',\'reference unna\'),\n                Field(\'descriptor\',\'string\'),\n                Field(\'technicalname\',\'string\'),\n                Field(\'hazdivision\',\'string\',requires = IS_EMPTY_OR(IS_IN_SET((\'1.1\',\'1.2\',\'1.3\',\'1.4\',\'1.5\',\'1.6\',\'2.1\',\'2.2\',\'2.3\',\'3\',\'4.1\',\'4.2\',\'4.3\',\'5\',\'5.1\',\'6.1\',\'6.2\',\'7\',\'8\',\'9\',\'NON-RCRA\')))),\n                Field(\'pggroup\',\'string\',requires = IS_EMPTY_OR(IS_IN_SET((\'FORBDN\',\'PG I\',\'PG I-II\',\'PG I-III\',\'PG II\',\'PG II-III\',\'PG III\')))), # packing group\n                Field(\'psndescriptor\',\'string\'),\n                Field(\'hazardousproperties\',\'list:string\', requires = IS_IN_DB(db,\'hazard.id\', db.hazard._format,multiple=True)),\n                format=\'%(contnum)s\'\n               )\ndb.container.tsdf.requires = IS_EMPTY_OR(IS_IN_DB(db,\'tsdf.id\',\'%(tsdfname)s\'))\ndb.container.containerstyle.requires=IS_EMPTY_OR(IS_IN_SET((\'Bin\',\'Box\',\'Pail\',\'Drum\',\'End Dump\',\'Pallet\',\'Salvage\',\'Tank Truck\',\'Cylinder\')))    \ndb.container.containersize.requires=IS_EMPTY_OR(IS_IN_SET((\'\',\'05G\',\'08G\',\'10G\',\'12G\',\'15G\')))\ndb.container.containerconstruction.requires=IS_EMPTY_OR(IS_IN_SET((\'NA\',\'Plastic\',\'Wood\',\'Metal\',\'Fiber\')))\ndb.container.containertype.requires = IS_EMPTY_OR(IS_IN_DB(db,\'containertype.id\',\'%(name)s\')), #allow Containertype to be empty\ndb.container.containertype.widget = SQLFORM.widgets.options.widget #make drop-down list    \ndb.container.psn.requires = IS_EMPTY_OR(IS_IN_DB(db,\'psn.id\',\'%(propershippingname)s\')), #allow PSN to be empty\ndb.container.psn.widget = SQLFORM.widgets.options.widget #make drop-down list    \ndb.container.generator.requires = IS_EMPTY_OR(IS_IN_DB(db,\'generator.id\',\'%(name)s\')), #allow container ID to be empty \ndb.container.generator.widget = SQLFORM.widgets.options.widget #make drop-down list    \ndb.container.cstate.requires=IS_EMPTY_OR(IS_IN_SET((\'Solid\',\'Liquid\'))),\ndb.container.cstate.widget = SQLFORM.widgets.options.widget #make drop-down list \ndb.container.unna.requires = IS_EMPTY_OR(IS_IN_DB(db,\'unna.id\',\'%(unna)s\')), #allow container ID to be empty \ndb.container.unna.widget = SQLFORM.widgets.options.widget #make drop-down list    \n\ndb.define_table(\'item\',\n                Field(\'name\',\'reference chemindex\',required=True),\n                Field(\'condition_\',\'reference condition_\'),#,widget=SQLFORM.widgets.options.widget,requires=[IS_IN_DB(db, db.condition_.name)]),\n                Field(\'state\',\'string\'),\n                Field(\'amount\',\'decimal(65,2)\'),\n                Field(\'units\', \'reference units\'),\n                Field(\'capacity\',\'integer\'),\n                Field(\'quantity\',\'integer\'),\n                Field(\'receptacle\', \'reference receptacle\'),\n                Field(\'pounds\',compute=lambda r: db.conversions(r[\'Iunits\']).unitsfrom),\n                Field(\'hazwastecodes\',\'string\',readable=False),\n                Field(\'components\',\'text\'),\n                Field(\'mixture\',\'text\'),\n                Field(\'comments\',\'text\'),\n                Field(\'input_id\',\'string\'),#a reference from the feeder system, example "From Dr. Bromer\'s lab"\n                Field(\'inputnumber\',\'integer\'),#a reference from the feeder system, example "12345" OR otp_waste_container_id\n                Field(\'shelf\', \'reference shelf\', default=0), #allow container ID to be empty\n                Field(\'container\', \'reference container\'),\n                format=\'%(name)s\'\n               )\ndb.item.state.requires=IS_IN_SET((\'Solid\',\'Liquid\',\'Gas\'))\ndb.item.name.requires = IS_EMPTY_OR(IS_IN_DB(db,\'chemindex.id\',\'%(chemname)s\'))\ndb.item.container.requires = IS_EMPTY_OR(IS_IN_DB(db,\'container.id\',\'%(id)s %(contnum)s\')), #allow container ID to be empty - Put ID and container key, in case container key is blank\ndb.item.container.widget = SQLFORM.widgets.options.widget #make drop-down list    \ndb.item.units.requires = IS_EMPTY_OR(IS_IN_DB(db,\'units.id\',\'%(name)s\')), #allow units to be empty\ndb.item.units.widget = SQLFORM.widgets.options.widget #make drop-down list\ndb.item.receptacle.requires = IS_EMPTY_OR(IS_IN_DB(db,\'receptacle.id\',\'%(name)s\')), #allow receptacle to be empty\ndb.item.receptacle.widget = SQLFORM.widgets.options.widget #make drop-down list\ndb.item.condition_.requires = IS_EMPTY_OR(IS_IN_DB(db,\'condition_.id\',\'%(name)s\')), #allow condition to be empty\ndb.item.condition_.widget = SQLFORM.widgets.options.widget #make drop-down list  \ndb.item.shelf.requires = IS_EMPTY_OR(IS_IN_DB(db,\'shelf.id\',\'%(shelfcode)s %(disposalcode)s\')), #allow condition to be empty\ndb.item.shelf.widget = SQLFORM.widgets.options.widget #make drop-down list         \n\n#for printing manifest to PDF \n#Each record is a form layout\ndb.define_table(\'manifest_layout\',\n                #Number elements rom 1000 to make room from change.\n                # Elements on first page start with 1000 + box number. Example: #1 Generator number = element 1001\n                #Elements on page 2 start with 2000\n                Field(\'type\',\'string\'),\n                Field(\'name\',\'string\'),\n                Field(\'element\',\'integer\'),\n                Field(\'x1\',\'double\'), # x and y are botton left corner\n                Field(\'y1\',\'double\'),\n                Field(\'x2\',\'double\'), # x and y are botton left corner\n                Field(\'y2\',\'double\'),\n                Field(\'font\',\'string\'),\n                Field(\'size\',\'double\'),\n                Field(\'bold\',\'integer\'),\n                Field(\'italic\',\'integer\'),\n                Field(\'underline\',\'integer\'),\n                Field(\'foreground\',\'integer\'),\n                Field(\'background\',\'integer\'),\n                Field(\'align\',\'string\'),\n                Field(\'priority\',\'integer\'),\n                Field(\'multiline\',\'integer\'),\n                )\n\n#FLAMMABLE LIQUIDS, N.O.S.\ndb.define_table(\'site\',\n                Field(\'sitename\',\'string\'),\n                #EPA Identification Number\n                Field(\'epaid\',\'string\'),\n                format=\'%(sitename)s\'\n               )\n\n\n## Fill empty tables\n#if db(db.person).isempty():\n    #db.chemindex.cname="Acetone"\n#for row in db(db.chemindex.id > 0).select():\n#    if (row.id % 2 == 0):\n#        row.update_record(treatment=1)\n#    else:\n#        row.update_record(treatment=2)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/restricted.py", line 227, in restricted\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/models/db.py", line 24, in <module>\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/base.py", line 174, in __call__\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/packages/dal/pydal/base.py", line 431, in __init__\nSyntaxError: Error in URI \'BearFacts\' or database not supported\n'
p11
s.
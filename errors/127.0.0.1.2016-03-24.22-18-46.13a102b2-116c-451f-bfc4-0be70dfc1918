(dp1
S'output'
p2
S"<class 'xml.parsers.expat.ExpatError'> reserved prefix (xmlns) must not be declared or undeclared: line 1, column 0"
p3
sS'layer'
p4
S'/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    addbutton =""\n    PageHeader = "Dashboard"\n    #response.flash = T("Hello World")\n    itemcount = db(db.item.id > 0).count()\n    containercount = db(db.container.id > 0).count()\n    shipmentcount = db(db.shipment.id > 0).count()\n    chemindexcount = db(db.chemindex.id > 0).count()\n    return dict(PageHeader=PageHeader,message=T(\'Welcome to OHWM!\'),itemcount=itemcount,containercount=containercount,shipmentcount=shipmentcount,chemindexcount=chemindexcount,addbutton=addbutton)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n#pyfpdf elements:\n#name: placeholder identification\n#type: \'T\': texts, \'L\': lines, \'I\': images, \'B\': boxes, \'BC\': barcodes\n#x1, y1, x2, y2: top-left, bottom-right coordinates (in mm)\n#font: ie "Arial"\n#size: text size in points, ie. 10\n#bold, italic, underline: text style (non-empty to enable)\n#foreground, background: text and fill colors, ie. 0xFFFFFF\n#align: text aling, \'L\': left, \'R\': right, \'C\': center\n#text: default string, can be replaced at runtime\n#priority: Z-Order\n#multiline: None for single line (default), True to for multicells (multiples lines), False trims to fit exactly the space defined\n\ndef generate():\n    from gluon.contrib.pyfpdf import Template\n    import os.path\n    elements = [ \n     #letter paper =  215.9 mm x 279.4 mm\n    { \'name\': \'background\', \'type\': \'I\', \'x1\': 3.3, \'y1\': 3.3, \'x2\': 212.6, \'y2\': 276.1, \'font\': None, \'size\': 0.0, \'bold\': 0, \'italic\': 0, \'underline\': 0, \'foreground\': 0, \'background\': 0, \'align\': \'I\', \'text\': \'logo\', \'priority\': 0, },\n    { \'name\': \'Generator_ID_Number\', \'type\': \'T\', \'x1\': 50.0, \'y1\': 40.5, \'x2\': 12.0, \'y2\': 12.0, \'font\': \'Arial\', \'size\': 12.0, \'bold\': 0, \'italic\': 0, \'underline\': 0, \'foreground\': 0, \'background\': 0, \'align\': \'I\', \'text\': \'\', \'priority\': 2, },\n    { \'name\': \'Page_1_of\', \'type\': \'T\', \'x1\': 105.0, \'y1\': 40.5, \'x2\': 12.0, \'y2\': 12.0, \'font\': \'Arial\', \'size\': 0.0, \'bold\': 0, \'italic\': 0, \'underline\': 0, \'foreground\': 0, \'background\': 0, \'align\': \'I\', \'text\': \'\', \'priority\': 2, },\n    { \'name\': \'Emergency_Response_Phone\', \'type\': \'T\', \'x1\': 120.0, \'y1\': 40.5, \'x2\': 12.0, \'y2\': 12.0, \'font\': \'Arial\', \'size\': 0.0, \'bold\': 0, \'italic\': 0, \'underline\': 0, \'foreground\': 0, \'background\': 0, \'align\': \'I\', \'text\': \'\', \'priority\': 2, },\n    { \'name\': \'Manifest_Tracking_Number\', \'type\': \'T\', \'x1\': 157.0, \'y1\': 40.5, \'x2\': 12.0, \'y2\': 12.0, \'font\': \'Arial\', \'size\': 12.0, \'bold\': 1, \'italic\': 0, \'underline\': 0, \'foreground\': 0, \'background\': 0, \'align\': \'I\', \'text\': \'\', \'priority\': 2, },\n    { \'name\': \'Generator_Name_Address\', \'type\': \'T\', \'x1\': 20.0, \'y1\': 40, \'x2\': 100.0, \'y2\': 37.0, \'font\': \'Arial\', \'size\': 10.0, \'bold\': 0, \'italic\': 0, \'underline\': 0, \'foreground\': 0, \'background\': 0, \'align\': \'I\', \'text\': \'\', \'priority\': 2, \'multiline\' : 3 },\n    { \'name\': \'Generator_Site_Address\', \'type\': \'T\', \'x1\': 115.0, \'y1\': 40, \'x2\': 180.0, \'y2\': 37.0, \'font\': \'Arial\', \'size\': 10.0, \'bold\': 0, \'italic\': 0, \'underline\': 0, \'foreground\': 0, \'background\': 0, \'align\': \'I\', \'text\': \'\', \'priority\': 2, \'multiline\' : 3 },\n    { \'name\': \'Generator_Name_Phone\', \'type\': \'T\', \'x1\': 35.0, \'y1\': 49, \'x2\': 180.0, \'y2\': 37.0, \'font\': \'Arial\', \'size\': 10.0, \'bold\': 0, \'italic\': 0, \'underline\': 0, \'foreground\': 0, \'background\': 0, \'align\': \'I\', \'text\': \'\', \'priority\': 2, \'multiline\' : 3 },\n    { \'name\': \'line1\', \'type\': \'L\', \'x1\': 100.0, \'y1\': 25.0, \'x2\': 100.0, \'y2\': 57.0, \'font\': \'Arial\', \'size\': 0, \'bold\': 0, \'italic\': 0, \'underline\': 0, \'foreground\': 0, \'background\': 0, \'align\': \'I\', \'text\': None, \'priority\': 3, },\n    { \'name\': \'barcode\', \'type\': \'BC\', \'x1\': 20.0, \'y1\': 246.5, \'x2\': 140.0, \'y2\': 254.0, \'font\': \'Interleaved 2of5 NT\', \'size\': 0.75, \'bold\': 0, \'italic\': 0, \'underline\': 0, \'foreground\': 0, \'background\': 0, \'align\': \'I\', \'text\': \'200000000001000159053338016581200810081\', \'priority\': 3, },\n]\n    # self.image("logo.png", x=10, y=8, w=23)\n    f = Template(format="A4",\n             elements = elements,\n             title="Sample Invoice", author="Sample Company",\n             subject="Sample Customer", keywords="Electronic TAX Invoice")\n    f.add_page()\n    \n    #logo=os.path.join(request.env.web2py_path,"static","images","manifest.png")\n     #self.image(logo,10,8,33)\n\n    #f["company_logo"] = os.path.join(request.env.web2py_path, "gluon", "contrib", "pyfpdf", "tutorial", "logo.png"\n    #os.path.join(request.env.web2py_path,request.folder,"static","images","g3001.png")\n    f["background"] = os.path.join(request.env.web2py_path,request.folder,"static","images","manifest.png")\n    #f["background"] = URL(\'static\', \'images\', args="manifest.png")\n    #f["Generator_ID_Number"] = "123456789"\n    #f["company_logo"] = "pyfpdf/tutorial/logo.png"\n    f["Generator_ID_Number"] = "123456789"\n    f["Page_1_of"] = "2"\n    f["Emergency_Response_Phone"] = "510-642-6908"\n    f["Manifest_Tracking_Number"] = "NYB54321"\n    f["Generator_Name_Address"] = "Somewhere, CA, USA\\n123 Anywhere Rd.\\nMain Campus"\n    f["Generator_Name_Phone"] = "510-642-6073"\n    f["Generator_Site_Address"] = "Somewhere, CA, USA\\n123 Anywhere Rd.\\nMain Site"\n\n\n    \n    response.headers[\'Content-Type\']=\'application/pdf\'\n    return f.render(\'invoice.pdf\', dest=\'S\')\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef month_selector():\n    if not request.vars.month: return \'\'\n    months = [\'January\', \'February\', \'March\', \'April\', \'May\',\n              \'June\', \'July\', \'August\', \'September\' ,\'October\',\n              \'November\', \'December\']\n    month_start = request.vars.month.capitalize()\n    selected = [m for m in months if m.startswith(month_start)]\n    return DIV(*[DIV(k,\n                     _onclick="jQuery(\'#month\').val(\'%s\')" % k,\n                     _onmouseover="this.style.backgroundColor=\'yellow\'",\n                     _onmouseout="this.style.backgroundColor=\'white\'"\n                     ) for k in selected])\n\n\n#must use this for list fields to show rendered value, instead of record ids\ndef render_docs(ids,row):\n      doc=""\n      for id in ids:\n         doc = doc+db.hazard(id).hazardabbrev+" "#db.wbdocuments(id)\n      return doc\n\n\ndef updatedisposalcode():\n    \n    recid = request.vars.name\n    record = db.chemindex(recid)# or redirect(URL(\'error\'))\n    if (record):\n        rdisposalcode = record.disposalcode\n    else:\n        rdisposalcode = ""\n    return rdisposalcode\n    #return "jQuery(\'#target\').html(%s);" % repr(request.vars.name)\n\n    \n    #+\'-\'+\',\'.join(map(lambda v : db.hazard[v].hazardabbrev , r[\'chazard\']))+\'-\'+db.tsdf[r[\'tsdf\']].tsdfname[:3].upper()+\'-\'+db.treatment[r[\'treatment\']].treatnameabbrev.upper()),\n    \n    \n#Format for Select2\ndef getchemindex():\n    rcount=""\n    q = request.vars[\'q\']\n    rows = db(db.chemindex.chemname.contains(q, all=True)).select(db.chemindex.id, db.chemindex.chemname, orderby=db.chemindex.chemname)\n    for idx,row in enumerate(rows):\n        rcount += "{\\"id\\":\\""+str(rows[idx].id)+"\\",\\"text\\":\\""+rows[idx].chemname+"\\"},"\n    if rcount.endswith(","):\n        rcount = rcount[:-1] # remove trailing comma\n    return ("["+rcount+"]")\n\ndef popchemindex():\n    rows = db(db.chemindex.id>0).select() \n    for row in rows:\n        db.chemindex[row.id] = dict(group="OR",tsdf=3,treatment=3)\n        #db(db.chemindex.id == row.id).update(group="OR",tsdf=3,treatment=3)\n    return ("done")\n\n\n\n@service.soap(\'WSAdditem\',returns={\'result\':int},args={\'otp_container_id\':int})\ndef WSAdditem(a,b):\n    itemrecord = db(db.item.inputnumber==otp_container_id).select().first()\n    if not (itemrecord): #record does not exist\n        \n        Transferid=1\n\n        db.item.insert(inputnumber=otp_container_id)\n#\'otp_person_uid\':str,\'building\':str,,\'otp_person_first\':str,\'otp_person_last\':str,\'otp_department\':str,\'otp_container_condition_id\':int,\'otp_phys_state_id\':int,\'otp_container_condition_id\':int,\'otp_bottle_type\':str,\'otp_container_size_unit\':str,\'otp_container_size\':str,\'otp_container_size_unit\':str,\'otp_container_size\':float,\'otp_accumulation_start_date\':str,\'otp_pickup_date\':str,\'otp_primary_component\':int,\'otp_components\':str,\'otp_primary_component\':int,\'srs_chartstring\':str,\'srs_project_id\':int,\'otp_primary_component\':int,\'room\':str,\'HWPComments\':str,\'HWPepa_hw_no\':str\n    else:#record already exists\n        Transferid=-1   \n        \n    return (Transferid)\n\nresponse._vars=response._caller(call)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/restricted.py", line 227, in restricted\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/controllers/default.py", line 194, in <module>\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/globals.py", line 412, in <lambda>\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/applications/chemwastepro/controllers/default.py", line 121, in call\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/tools.py", line 5966, in __call__\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/tools.py", line 5865, in serve_soap\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/contrib/pysimplesoap/server.py", line 226, in dispatch\n  File "/Users/byoung/Desktop/web2py/web2py.app/Contents/Resources/gluon/contrib/pysimplesoap/simplexml.py", line 56, in __init__\n  File "xml/dom/minidom.pyc", line 1924, in parseString\n  File "xml/dom/expatbuilder.pyc", line 940, in parseString\n  File "xml/dom/expatbuilder.pyc", line 223, in parseString\nExpatError: reserved prefix (xmlns) must not be declared or undeclared: line 1, column 0\n'
p11
s.